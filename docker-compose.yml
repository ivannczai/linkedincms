# Docker Compose configuration ONLY for the PostgreSQL Database service
# Used for local development (backend/frontend run directly on host)
# and as the base for production runs (which add backend/frontend services via override).
# version: '3.8' # Removed obsolete version tag

services:
  db:
    image: postgres:15-alpine
    volumes:
      # Mount named volume for persistent data
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env # Load DB credentials from .env
    environment:
      # Ensure these are set for the image's internal setup
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      # Removed: - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      # Expose DB port 5432 to the host machine for local backend connection
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped # Optional: Restart DB if it stops unexpectedly
    networks:
      - app-network

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - NGINX_SERVER_NAME=localhost
      - VITE_API_URL=http://backend:8000
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

# Define the named volume for persistent DB data
volumes:
  postgres_data:
